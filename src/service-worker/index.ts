import { version, files, build, prerendered } from "$service-worker";

const ASSETS = `cache${version}`;

// `shell` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = build.concat(files);
const cached = new Set(to_cache);

declare const self: ServiceWorkerGlobalScope;

self.addEventListener("install", (event) => {
	event.waitUntil(
		caches
			.open(ASSETS)
			.then((cache) => cache.addAll(to_cache))
			.then(() => {
				self.skipWaiting();
			})
	);
});

self.addEventListener("activate", (event) => {
	event.waitUntil(
		caches.keys().then(async (keys) => {
			// delete old caches
			for (const key of keys) {
				if (key !== ASSETS) await caches.delete(key);
			}

			self.clients.claim();
		})
	);
});

self.addEventListener("fetch", (event) => {
	if (event.request.method !== "GET" || event.request.headers.has("range")) return;

	const url = new URL(event.request.url);

	// don't try to handle e.g. data: URIs
	if (!url.protocol.startsWith("http")) return;

	// ignore dev server requests
	if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

	// always serve static files and bundler-generated assets from cache
	if (url.host === self.location.host && cached.has(url.pathname)) {
		event.respondWith(caches.match(event.request) as PromiseLike<Response>);
		return;
	}

	// for pages, you might want to serve a shell `service-worker-index.html` file,
	// which Sapper has generated for you. It's not right for every
	// app, but if it's right for yours then uncomment this section
	if (
		url.origin === self.origin &&
		prerendered.find((route) => {
			const route_url = new URL(route);
			return route_url.pathname.includes(url.pathname);
		})
	) {
		// event.respondWith(caches.match("/service-worker-index.html") as PromiseLike<Response>);
		// TODO: Test this
		// event.respondWith(caches.match("/") as PromiseLike<Response>);
		return;
	}

	if (event.request.cache === "only-if-cached") return;

	// 1. Determine if Hydrus Request
	// 2. Determine which type of Hydrus request

	// for everything else, try the network first, falling back to
	// cache if the user is offline. (If the pages never change, you
	// might prefer a cache-first approach to a network-first one.)
	event.respondWith(
		caches.open(`offline${version}`).then(async (cache) => {
			// Reply with cached files immediately as file request urls are immutable
			if (url.pathname.includes("get_files/file")) {
				const response = await cache.match(event.request);
				if (response) return response;
			}
			try {
				const response = await fetch(event.request);
				cache.put(event.request, response.clone());
				return response;
			} catch (err) {
				const response = await cache.match(event.request);
				if (response) return response;

				throw err;
			}
		})
	);
});

self.addEventListener("message", (event) => {});
